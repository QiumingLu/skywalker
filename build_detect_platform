#!/bin/sh
#
# Detects OS we're compiling on and outputs a file specified by the first
# argument, which in turn gets read while processing Makefile.
#
# The output will set the following variables:
#   CC                          C Compiler path
#   CXX                         C++ Compiler path
#   PLATFORM_LDFLAGS            Linker flags
#   PLATFORM_LIBS               Libraries flags
#   PLATFORM_SHARED_EXT         Extension for shared libraries
#   PLATFORM_SHARED_LDFLAGS     Flags for building shared library
#                               This flag is embedded just before the name
#                               of the shared library without intervening spaces
#   PLATFORM_SHARED_CFLAGS      Flags for compiling objects for shared library
#   PLATFORM_CCFLAGS            C compiler flags
#   PLATFORM_CXXFLAGS           C++ compiler flags.  Will contain:
#

OUTPUT=$1
PREFIX=$2
if test -z "$OUTPUT" || test -z "$PREFIX"; then
  echo "usage: $0 <output-filename> <directory_prefix>" >&2
  exit 1
fi

# Deleting existing output, if it exists
rm -f $OUTPUT
touch $OUTPUT

if test -z "$CC"; then
  CC=cc
fi

if test -z "$CXX"; then
  CXX=g++
fi

if test -z "$TMPDIR"; then
    TMPDIR=/tmp
fi

# Detect OS
if test -z "$TARGET_OS"; then
    TARGET_OS=`uname -s`
fi


PLATFORM_CCFLAGS=
PLATFORM_CXXFLAGS="-std=c++11 -fno-rtti -Wall -Wextra -Wno-unused-parameter -Woverloaded-virtual -Wpointer-arith -Wshadow -Wwrite-strings -I/usr/local/include -I/usr/include"
PLATFORM_LDFLAGS="-L/usr/local/lib -L/usr/lib"
PLATFORM_LIBS="-lprotobuf -lleveldb -lvoyager"

PLATFORM_SHARED_EXT="so"
PLATFORM_SHARED_LDFLAGS="-shared -Wl,-soname -Wl,"
PLATFORM_SHARED_CFLAGS="-fPIC"

if [ "$TARGET_OS" = "Darwin" ]; then
  PLATFORM_SHARED_EXT=dylib
  [ -z "$INSTALL_PATH" ] && INSTALL_PATH=`pwd`
  PLATFORM_SHARED_LDFLAGS="-dynamiclib -install_name $INSTALL_PATH/"
fi

DIRS="$PREFIX/log $PREFIX/machine $PREFIX/network $PREFIX/paxos $PREFIX/storage $PREFIX/util $PREFIX/proto"

PROTOC=protoc
PROTOS_PATH=$PREFIX/proto
PROTOS=`find $PROTOS_PATH -name '*.proto'`
$PROTOC -I $PROTOS_PATH --cpp_out=$PROTOS_PATH $PROTOS

set -f
PRUNE_TEST="-name *test*.cc -prune"
PRUNE_BENCH="-name *_bench.cc -prune"
PORTABLE_FILES=`find $DIRS $PRUNE_TEST -o $PRUNE_BENCH -o -name '*.cc' -print | sort | sed "s,^$PREFIX/,," | tr "\n" " "`

set +f
echo "SOURCES=$PORTABLE_FILES" >> $OUTPUT

CXXOUTPUT="${TMPDIR}/skywalker_build_detect_platform-cxx.$$"

# Test whether Snappy library is installed
# http://code.google.com/p/snappy/
$CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
    #include <snappy.h>
    int main() {}
EOF
  if [ "$?" = 0 ]; then
    PLATFORM_LIBS="$PLATFORM_LIBS -lsnappy"
  fi

# Test whether tcmalloc is available
$CXX -x c++ - -o $CXXOUTPUT -ltcmalloc 2>/dev/null  <<EOF
  int main() {}
EOF
  if [ "$?" = 0 ]; then
      PLATFORM_LIBS="$PLATFORM_LIBS -ltcmalloc"
  fi

  rm -f $CXXOUTPUT 2>/dev/null

echo "CC=$CC" >> $OUTPUT
echo "CXX=$CXX" >> $OUTPUT
echo "PLATFORM_LDFLAGS=$PLATFORM_LDFLAGS" >> $OUTPUT
echo "PLATFORM_LIBS=$PLATFORM_LIBS" >> $OUTPUT
echo "PLATFORM_CCFLAGS=$PLATFORM_CCFLAGS" >> $OUTPUT
echo "PLATFORM_CXXFLAGS=$PLATFORM_CXXFLAGS" >> $OUTPUT
echo "PLATFORM_SHARED_EXT=$PLATFORM_SHARED_EXT" >> $OUTPUT
echo "PLATFORM_SHARED_LDFLAGS=$PLATFORM_SHARED_LDFLAGS" >> $OUTPUT
echo "PLATFORM_SHARED_CFLAGS=$PLATFORM_SHARED_CFLAGS" >> $OUTPUT
