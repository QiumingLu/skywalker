syntax = "proto3";
package skywalker;

enum PaxosMessageType {
  PREPARE = 0;
  PREPARE_REPLY = 1;
  ACCEPT = 2;
  ACCEPT_REPLY = 3;
  NEW_CHOSEN_VALUE = 4;
  ASK_FOR_LEARN = 5;
  SEND_LEARNED_VALUE = 6;
  SEND_NOW_INSTANCE_ID = 7;
  COMFIRM_ASK_FOR_LEARN = 8;
  ASK_FOR_CHECKPOINT = 9;
}

message PaxosValue {
  uint64 value_id = 1;
  uint32 machine_id = 2;
  bytes user_data = 3;
}

message PaxosMessage {
  PaxosMessageType type = 1;
  uint64 node_id = 2;
  uint64 instance_id = 3;
  uint64 proposal_id = 4;
  uint64 proposal_node_id = 5;
  uint64 pre_accepted_id = 6;
  uint64 pre_accepted_node_id = 7;
  uint64 rejected_id = 8;
  uint64 now_instance_id = 9;
  uint64 min_chosen_instance_id = 10;
  bytes membership = 11;
  bytes master_state = 12;
  PaxosValue value = 13;
}

enum CheckpointMessageType {
  CHECKPOINT_BEGIN = 0;
  CHECKPOINT_FILE = 1;
  CHECKPOINT_END = 2;
  CHECKPOINT_COMFIRM = 3;
}

message CheckpointMessage {
  CheckpointMessageType type = 1;
  uint64 node_id = 2;
  uint64 instance_id = 3;
  sint32 sequence_id = 4;
  sint32 machine_id = 5;
  string file = 6;
  uint64 offset =7;
  bytes data = 8;
  bool flag = 9;
}

enum ContentType {
  PAXOS_MESSAGE = 0;
  CHECKPOINT_MESSAGE = 1;
}

message Content {
  ContentType type = 1;
  uint32 group_id = 2;
  PaxosMessage paxos_msg = 4;
  CheckpointMessage checkpoint_msg = 5;
}

message PaxosInstance {
  uint64 instance_id = 1;
  uint64 promised_id = 2;
  uint64 promised_node_id = 3;
  uint64 accepted_id = 4;
  uint64 accepted_node_id = 5;
  PaxosValue accepted_value = 6;
}

message MemberMessage {
  uint64 id = 1;
  string host = 2;
  uint32 port = 3;
  bytes context = 4;
}

enum MemberChangeType {
  MEMBER_ADD = 0;
  MEMBER_REMOVE = 1;
}

message MemberChangeMessage {
  repeated MemberMessage member = 2;
  repeated MemberChangeType type = 3;
}

message Membership {
  uint64 version = 1;
  map<uint64, MemberMessage> members = 2;
}

message MasterState {
  uint64 version = 1;
  uint64 node_id = 2;
  uint64 lease_time = 3;
}
